//Bot√£o adicionar estrategia
document.addEventListener('DOMContentLoaded', () => {
    const addButton = document.getElementById('btnAddStrategy');
    const menu = document.getElementById('menu');

    if (!addButton || !menu) {
        console.error("Erro: Elementos necess√°rios n√£o encontrados no DOM.");
        return;
    }

    addButton.addEventListener('click', (event) => {
        event.stopPropagation();
        menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
    });

    document.addEventListener('click', () => {
        menu.style.display = 'none';
    });

    menu.addEventListener('click', (event) => {
        event.stopPropagation();
    });
});
// Fun√ß√£o para adicionar cores √† sequ√™ncia e atualizar a exibi√ß√£o com imagens
document.addEventListener("DOMContentLoaded", function() {
    // Fun√ß√£o para adicionar cores √† sequ√™ncia e atualizar a exibi√ß√£o com imagens
    function handleColorSequence() {
    // Inicializando a sequ√™ncia de cores como um array vazio
    let sequence = [];

    // Elementos dos bot√µes para adicionar cores
    const modals = {
        red: document.getElementById("redButton"),
        black: document.getElementById("blackButton"),
        white: document.getElementById("whiteButton"),
        clear: document.getElementById("clearSequenceBtn") // Bot√£o para limpar a sequ√™ncia
    };

    // Elemento onde as imagens da sequ√™ncia ser√£o exibidas
    const sequenceImages = document.getElementById("sequenceImages");

    // Elementos da div de confirma√ß√£o para limpar
    const confirmationModal = document.getElementById("clearSequenceModal");
    const confirmYes = document.getElementById("confirmYes1");
    const confirmNo = document.getElementById("confirmNo1");

    // Elementos da div de confirma√ß√£o de limite
    const limitReachedModal = document.getElementById("limitReachedModal");
    const okayBtn = document.getElementById("okayBtn");

    // Fun√ß√£o para atualizar a exibi√ß√£o da sequ√™ncia de cores
    function updateSequenceDisplay() {
        sequenceImages.innerHTML = "";  // Limpa a exibi√ß√£o atual

        // Exibe as imagens da sequ√™ncia de cores
        sequence.forEach(color => {
            const img = document.createElement("img");
            img.src = `img/${color.toLowerCase()}.png`;  // Caminho da imagem
            img.alt = color;
            img.width = 40;  // Largura da imagem
            img.height = 40; // Altura da imagem
            sequenceImages.appendChild(img);  // Adiciona a imagem √† exibi√ß√£o
        });
    }

    // Fun√ß√£o para adicionar uma cor √† sequ√™ncia e atualizar a exibi√ß√£o
    function addColorToSequence(color) {
        if (sequence.length < 8) {  // Limite de 8 cores
            sequence.push(color);  // Adiciona a cor √† sequ√™ncia
            updateSequenceDisplay();  // Atualiza a exibi√ß√£o da sequ√™ncia
        } else {
            // Exibe a div de confirma√ß√£o quando o limite √© atingido
            limitReachedModal.style.display = "flex";
        }
    }

    // Fun√ß√£o para limpar a sequ√™ncia de cores
    function clearSequence() {
        sequence = [];  // Limpa o array de sequ√™ncia
        updateSequenceDisplay();  // Atualiza a exibi√ß√£o, que ficar√° vazia
        limitReachedModal.style.display = "none";  // Esconde a div de confirma√ß√£o
    }

    // Fun√ß√£o para fechar a div de confirma√ß√£o
    function closeLimitReachedModal() {
        limitReachedModal.style.display = "none";  // Fecha a div de confirma√ß√£o
    }
    // Fun√ß√£o para fechar a div de confirma√ß√£o
    function closeConfirmationModal() {
        confirmationModal.style.display = "none";  // Fecha a div de confirma√ß√£o
    }
    // Evento de clique para adicionar a cor vermelha (Red)
    modals.red.onclick = function() {
        addColorToSequence("RED");
    };

    // Evento de clique para adicionar a cor preta (Black)
    modals.black.onclick = function() {
        addColorToSequence("BLACK");
    };

    // Evento de clique para adicionar a cor branca (White)
    modals.white.onclick = function() {
        addColorToSequence("WHITE");
    };

    // Evento de clique para limpar a sequ√™ncia
    modals.clear.onclick = function() {
        clearSequence();  // Chama a fun√ß√£o para limpar a sequ√™ncia
    };

    // Fechar a div de confirma√ß√£o quando o bot√£o "OK" for clicado
    okayBtn.onclick = function() {
        closeLimitReachedModal();  // Fecha a div de confirma√ß√£o
    };
    // Evento de clique para limpar a sequ√™ncia (exibe a confirma√ß√£o)
    modals.clear.onclick = function() {
        confirmationModal.style.display = "flex";  // Exibe a div de confirma√ß√£o
    };

    // Confirmar a limpeza da sequ√™ncia ao clicar em "Sim"
    confirmYes.onclick = function() {
        clearSequence();  // Chama a fun√ß√£o para limpar a sequ√™ncia
        closeConfirmationModal();  // Fecha a div de confirma√ß√£o
    };

    // Cancelar a limpeza da sequ√™ncia ao clicar em "Cancelar"
    confirmNo.onclick = function() {
        closeConfirmationModal();  // Chama a fun√ß√£o para fechar a confirma√ß√£o sem limpar
    };
    
}
    // Chama a fun√ß√£o para iniciar a sequ√™ncia
    handleColorSequence();

});

document.addEventListener("DOMContentLoaded", function() {
    function spanSelection() {
        // Constantes para as cores
        const COLOR_RED = "VERMELHO";
        const COLOR_BLACK = "PRETO";
        const COLOR_WHITE = "BRANCO";

        // Elementos dos checkboxes para escolher a cor
        const redCheckbox = document.getElementById("redCheckbox");
        const blackCheckbox = document.getElementById("blackCheckbox");
        const whiteCheckbox = document.getElementById("whiteCheckbox");

        // Elemento para exibir a sequ√™ncia de cores escolhidas
        const selectedColorDisplay = document.getElementById("selectedColor");

        // Array para armazenar as cores selecionadas
        let selectedColors = [];

        // Fun√ß√£o para atualizar a exibi√ß√£o da sequ√™ncia de cores
        function updateSelectedColors() {
            selectedColorDisplay.textContent = selectedColors.join('/');  // Exibe as cores no formato "RED/WHITE"
        }

        // Fun√ß√£o para adicionar ou remover a cor selecionada
        function toggleColorSelection(color) {
            if (selectedColors.includes(color)) {
                selectedColors = selectedColors.filter(c => c !== color);  // Remove a cor se j√° estiver selecionada
            } else {
                selectedColors.push(color);  // Adiciona a cor se n√£o estiver selecionada
            }
            updateSelectedColors();  // Atualiza a exibi√ß√£o das cores
        }

        // Fun√ß√£o para garantir que apenas uma das op√ß√µes (Red ou Black) pode ser escolhida
        function checkMutualExclusiveSelection(selectedColor, otherCheckbox, otherColor) {
            if (selectedColor === COLOR_RED || selectedColor === COLOR_BLACK) {
                otherCheckbox.checked = false;  // Desmarca o outro checkbox
                selectedColors = selectedColors.filter(color => color !== otherColor);  // Remove a outra cor
            }
        }

        // Evento de clique para Red
        redCheckbox.addEventListener("change", function() {
            if (this.checked) {
                checkMutualExclusiveSelection(COLOR_RED, blackCheckbox, COLOR_BLACK);
                toggleColorSelection(COLOR_RED);
            } else {
                toggleColorSelection(COLOR_RED);
            }
        });

        // Evento de clique para Black
        blackCheckbox.addEventListener("change", function() {
            if (this.checked) {
                checkMutualExclusiveSelection(COLOR_BLACK, redCheckbox, COLOR_RED);
                toggleColorSelection(COLOR_BLACK);
            } else {
                toggleColorSelection(COLOR_BLACK);
            }
        });

        // Evento de clique para White
        whiteCheckbox.addEventListener("change", function() {
            toggleColorSelection(COLOR_WHITE);
        });
    }

    // Chama a fun√ß√£o para iniciar a sequ√™ncia
    spanSelection();
});

document.addEventListener("DOMContentLoaded", function () {
    const whiteCheckbox = document.getElementById('whiteCheckbox');
    const betWhiteField = document.getElementById('betWhiteField');
    const betWhiteInput = document.getElementById('betWhite'); // Campo de input para o valor do Branco

    // Fun√ß√£o para mostrar ou ocultar o campo de aposta no Branco
    function toggleBetWhiteField() {
        if (whiteCheckbox.checked) {
            betWhiteField.style.display = 'block'; // Mostra o campo
        } else {
            betWhiteField.style.display = 'none'; // Oculta o campo
            betWhiteInput.value = ""; // Limpa o valor do campo
        }
    }

    // Adiciona o evento de mudan√ßa ao checkbox "Branco"
    whiteCheckbox.addEventListener('change', toggleBetWhiteField);

    // Verifica o estado inicial do checkbox ao carregar a p√°gina
    toggleBetWhiteField();
});


// REMOVER ESTRATEGIA
document.addEventListener("DOMContentLoaded", async function () {
    const confirmationModal = document.getElementById("confirmationModal");
    const confirmYes = document.getElementById("confirmYes");
    const confirmNo = document.getElementById("confirmNo");
    let strategyIdToDelete = null;

    const addStrategyButton = document.getElementById("btnAddStrategy");

    // üîπ Planos e seus limites de estrat√©gias
    const PLAN_LIMITS = {
        "BASIC": 2,
        "PRO": 4,
        "PREMIUM": 6
    };

    let userPlan = "BASIC"; // Valor padr√£o caso n√£o consiga obter do backend
    let strategyCount = 0;

    // üîπ Obt√©m o plano do usu√°rio
    async function fetchUserPlan() {
        try {
            const response = await fetch("/user/plan");
            const data = await response.json();

            if (data.success) {
                userPlan = data.plan_type.toUpperCase();
                console.log(`‚úÖ Plano do usu√°rio: ${userPlan}`);
                await fetchStrategyCount(); // S√≥ busca as estrat√©gias ap√≥s definir o plano
            } else {
                console.error("‚ùå Erro ao obter plano do usu√°rio.");
            }
        } catch (error) {
            console.error("‚ùå Erro ao buscar plano do usu√°rio:", error);
        }
    }

    // üîπ Obt√©m a quantidade de estrat√©gias do usu√°rio
    async function fetchStrategyCount() {
        try {
            const response = await fetch("/user/strategy-count");
            const data = await response.json();

            if (data.success) {
                strategyCount = data.strategyCount;
                console.log(`‚úÖ O usu√°rio tem ${strategyCount} estrat√©gias.`);
                checkStrategyLimit(); // Atualiza o bot√£o ap√≥s obter os dados
            } else {
                console.error("‚ùå Erro ao obter a contagem de estrat√©gias.");
            }
        } catch (error) {
            console.error("‚ùå Erro ao buscar estrat√©gias:", error);
        }
    }

    // üîπ Verifica se o usu√°rio atingiu o limite do plano e atualiza o bot√£o
    function checkStrategyLimit() {
        const maxStrategies = PLAN_LIMITS[userPlan] || 2;

        if (strategyCount >= maxStrategies) {
            addStrategyButton.disabled = true;
            addStrategyButton.innerText = `Limite atingido (${maxStrategies} estrat√©gias)`;
            addStrategyButton.classList.add("disabled");
        } else {
            addStrategyButton.disabled = false;
            addStrategyButton.innerText = "Adicionar Estrat√©gia";
            addStrategyButton.classList.remove("disabled");
        }
    }

    // üîπ Atualiza a exibi√ß√£o do bot√£o ao remover uma estrat√©gia
    function updateButtonAfterDeletion() {
        strategyCount--; // Reduz o contador de estrat√©gias
        checkStrategyLimit(); // Atualiza o bot√£o dinamicamente
    }

    // üîπ Adiciona evento de clique para todos os bot√µes "Remover"
    document.querySelectorAll(".delete-strategy").forEach(button => {
        button.addEventListener("click", function () {
            const strategyDiv = this.closest(".strategies");
            strategyIdToDelete = strategyDiv.getAttribute("data-strategy-id");

            if (!strategyIdToDelete) {
                console.error("‚ùå ID da estrat√©gia n√£o encontrado.");
                return;
            }

            confirmationModal.style.display = "flex"; // Exibe o modal
        });
    });

    // üîπ Se o usu√°rio confirmar a exclus√£o
    confirmYes.addEventListener("click", async function () {
        if (!strategyIdToDelete) return;

        try {
            const response = await fetch(`/strategy/delete/${strategyIdToDelete}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" }
            });

            const data = await response.json();
            if (data.success) {
                document.querySelector(`.strategies[data-strategy-id='${strategyIdToDelete}']`).remove();
                alert("‚úÖ Estrat√©gia removida com sucesso!");
                updateButtonAfterDeletion(); // Atualiza o bot√£o ap√≥s a remo√ß√£o
            } else {
                alert("‚ùå Erro ao remover a estrat√©gia.");
            }
        } catch (error) {
            console.error("‚ùå Erro ao deletar estrat√©gia:", error);
            alert("Erro ao remover a estrat√©gia.");
        }

        confirmationModal.style.display = "none"; // Esconde o modal
        strategyIdToDelete = null;
    });

    // üîπ Se o usu√°rio cancelar a exclus√£o
    confirmNo.addEventListener("click", function () {
        confirmationModal.style.display = "none"; // Fecha o modal
        strategyIdToDelete = null;
    });

    // üîπ Chama a fun√ß√£o para buscar o plano do usu√°rio e depois a contagem de estrat√©gias
    await fetchUserPlan();
});


function changeImage(imgElement, strategyId) {
    imgElement.style.opacity = 0;  // Efeito fade-out

    setTimeout(function() {
        let newStatus;
        
        // Alterna entre as imagens e define o novo status
        if (imgElement.src.includes('icons8-off-48.png')) {
            imgElement.src = '/img/icons8-on-48.png';  
            newStatus = 'active';
        } else {
            imgElement.src = '/img/icons8-off-48.png';  
            newStatus = 'inactive';
        }

        imgElement.style.opacity = 1;  // Efeito fade-in

        // Enviar requisi√ß√£o AJAX para atualizar no banco
        fetch('/update-status', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ strategyId: strategyId, status: newStatus })
        })
        .then(response => response.json())
        .then(data => {
            if (!data.success) {
                alert('Erro ao atualizar no banco!');
            }
        })
        .catch(error => console.error('Erro:', error));

    }, 150);
}

function initializeModalConfirmation() {
    // Elementos dos bot√µes de fechar
    const closeButtons = {
        add: document.getElementById("closeAddModal"),
        edit: document.getElementById("closeEditModal")
    };

    // Elementos dos bot√µes para abrir os modais
    const openButtons = {
        add: document.getElementById("openAddModal"),
        edit: document.getElementById("openEditModal")
    };

    // Elementos dos modais
    const modals = {
        add: document.getElementById("addModal"),
        edit: document.getElementById("editModal")
    };

    // Elementos da div de confirma√ß√£o
    const confirmationModal = document.getElementById("confirmationModal");
    const confirmYes = document.getElementById("confirmYes");
    const confirmNo = document.getElementById("confirmNo");

    // Fun√ß√£o para exibir o modal de confirma√ß√£o
    function showConfirmationModal(modalToClose) {
        confirmationModal.style.display = "flex";  // Exibe a div de confirma√ß√£o
        confirmationModal.setAttribute("data-modal", modalToClose);  // Salva qual modal fechar
    }

    // Fun√ß√£o de fechar o modal com base no ID do modal
    function closeModal(modal) {
        modal.style.display = "none";  // Esconde o modal
        document.body.classList.remove("modal-open");  // Remove o desfoque
    }

    // Certificar-se de que os modais come√ßam invis√≠veis
    modals.add.style.display = "none";  // Adiciona Modal est√° invis√≠vel
    modals.edit.style.display = "none";  // Edit Modal est√° invis√≠vel
    confirmationModal.style.display = "none";  // A div de confirma√ß√£o come√ßa invis√≠vel

    // Fun√ß√£o para abrir o modal de adicionar estrat√©gia
    openButtons.add.onclick = () => {
        modals.add.style.display = "flex";  // Exibe o modal de adicionar
    };

    // Fun√ß√£o para abrir o modal de editar estrat√©gia
    openButtons.edit.onclick = () => {
        modals.edit.style.display = "flex";  // Exibe o modal de editar
    };

    // Fun√ß√£o de abrir o modal de adicionar estrat√©gia com confirma√ß√£o
    closeButtons.add.onclick = () => {
        showConfirmationModal("add");  // Mostra a confirma√ß√£o antes de fechar
    };

    // Fun√ß√£o de abrir o modal de editar estrat√©gia com confirma√ß√£o
    closeButtons.edit.onclick = () => {
        showConfirmationModal("edit");  // Mostra a confirma√ß√£o antes de fechar
    };

    // Ao clicar em "Sim" no modal de confirma√ß√£o, fecha o modal correspondente
    confirmYes.onclick = function() {
        const modalToClose = confirmationModal.getAttribute("data-modal");
        if (modalToClose === "add") {
            closeModal(modals.add);  // Fecha o modal de adicionar
        } else if (modalToClose === "edit") {
            closeModal(modals.edit);  // Fecha o modal de editar
        }
        confirmationModal.style.display = "none";  // Fecha a div de confirma√ß√£o
    };

    // Ao clicar em "Cancelar", fecha a div de confirma√ß√£o sem fechar o modal
    confirmNo.onclick = function() {
        confirmationModal.style.display = "none";  // Fecha a div de confirma√ß√£o
    };
}
initializeModalConfirmation();
