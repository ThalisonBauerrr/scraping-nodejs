require('dotenv').config({ path: './config/.env' }); // Carregar vari√°veis de ambiente
const express = require('express');
const db = require('./config/db'); // Conex√£o com MySQL
const BlazeService = require("./services/blazeService"); // üîπ Importa a fun√ß√£o
const Strategy = require('./models/strategyModel');
const cron = require('node-cron'); // Importa o node-cron


const app = express();
const port = process.env.PORT || 3000;

// üîπ Fun√ß√£o para atualizar o status dos usu√°rios
async function updateUserStatus() {
    try {
        await db.execute(`
            UPDATE users
            SET user_status = 'active'
            WHERE user_status = 'stopped'
        `);
        console.log('Status dos usu√°rios atualizados para "active".');
    } catch (error) {
        console.error('Erro ao atualizar status dos usu√°rios:', error);
    }
}

// üîπ Inicializa√ß√£o do servidor
function startServer() {
    // üîπ Inicia o servidor
    app.listen(port, async () => {
        console.log(`üöÄ Servidor rodando em http://localhost:${port}`);
    

        await Strategy.updateBettingStatusSEMWHERE('inactive');
        // Chama o m√©todo para garantir que o processo de verifica√ß√£o dos doubles inicie
        await BlazeService.startChecking();  // Inicia a verifica√ß√£o dos doubles a cada 5 segundos
        // Retoma a verifica√ß√£o de sess√µes ativas para os usu√°rios com is_running = 1
        await BlazeService.resumeActiveSessions();

        // Agendar o cron job para rodar todos os dias √†s 00:00
        cron.schedule('0 0 * * *', async () => {
            console.log('Executando atualiza√ß√£o de status dos usu√°rios...');
            await updateUserStatus();
        });
    });
}

// Inicia o servidor
startServer();
