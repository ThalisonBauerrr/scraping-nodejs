const bcrypt = require('bcryptjs');
const blazeService = require("../services/blazeService");
const User = require('../models/userModel');
module.exports = {
    // üîπ Login na Blaze
    login: async (req, res) => {
        console.log("üìå Recebida requisi√ß√£o de login na Blaze.");
        const { email, password } = req.body;

        try {
            // üîπ Busca o usu√°rio no banco
            const user = await User.findByContaBlaze(email);
            if (!user) {
                console.log("‚ùå Usu√°rio n√£o encontrado:", email);
                return res.status(401).json({ success: false, error: "Usu√°rio n√£o encontrado." });
            }

            // üîπ Verifica a senha
            const isMatch = await bcrypt.compare(password, user.password_blaze);
            if (!isMatch) {
                console.log("‚ùå Senha incorreta para:", email);
                return res.status(401).json({ success: false, error: "Senha incorreta." });
            }

            console.log("‚úÖ Senha correta para:", email);

            // üîπ Faz login na Blaze e obt√©m o token
            const token = await blazeService.login(email, password);

            // üîπ Salva usu√°rio na sess√£o
            req.session.user = {
                id: user.id,
                email: user.email,
                username: user.username || "Usu√°rio",
                plan_type: user.plan_type
            };

            console.log(`‚úÖ Sess√£o iniciada para ${req.session.user.email}`);

            // üîπ Atualiza o status `is_running = 1`
            if (user.is_running !== 1) {
                await User.updateRunningStatus(user.id, 1);
                //console.log(`‚úÖ is_running atualizado para 1 para o usu√°rio ${user.id}`);
            }

            return res.status(200).json({
                success: true,
                username: user.username,
                balance: user.balance,
                token: token // Retorna o token na resposta
            });

        } catch (error) {
            console.error("‚ùå Erro no login da Blaze:", error);
            return res.status(500).json({
                success: false,
                error: error.message || "Erro interno ao fazer login na Blaze."
            });
        }
    },
    // üîπ Obter os √∫ltimos doubles
    getDoubles: async (req, res) => {
        try {
            const doubles = await blazeService.getDoubles();
            res.json({ success: true, doubles });
        } catch (error) {
            console.error("‚ùå Erro ao obter doubles:", error);
            res.status(500).json({ 
                success: false, 
                error: error.message || "Erro ao obter doubles." 
            });
        }
    },
    getTokenBlaze: async (userId) => {
        try {
            // üîπ Obt√©m o token do banco
            const tokenBlaze = await User.getBlazeTokenByUserId(userId);
    
            if (!tokenBlaze) {
                console.log("‚ùå Nenhum token Blaze encontrado para o usu√°rio.");
                return null;
            }
    
            console.log(`‚úÖ Token Blaze recuperado do banco: ${tokenBlaze}`);
            return tokenBlaze;
        } catch (error) {
            console.error("‚ùå Erro ao recuperar token da Blaze:", error);
            return null;
        }
    },
    loginn: async (req, res) => {
        console.log("üìå Recebida requisi√ß√£o de login na Blaze.");
        const {email, password} = req.body;
        try {
            // üîπ Busca o usu√°rio no banco
            const user = await User.findByContaBlaze(email);
            if (!user) {
                return res.render('login', { error: 'Usu√°rio n√£o encontrado' });
            }
            // üîπ Verifica a senha
            const isMatch = await bcrypt.compare(password, user.password_blaze);

            console.log(isMatch)
            if (!isMatch) {
                return res.render('login', { error: 'Senha incorreta' });
            }else{
                console.log("senha correta")
            }
            await blazeService.login(email, password);

            // Obt√©m informa√ß√µes do usu√°rio da Blaze
            const userInfo = await blazeService.getUserInfo();

            if (!userInfo || !userInfo.username || !userInfo.balance) {
                throw new Error("N√£o foi poss√≠vel obter os dados do usu√°rio da Blaze.");
            }

            // üîπ Verifica se h√° um usu√°rio logado no site
            if (!req.session.user) {
                console.log("‚ö† Nenhum usu√°rio logado na sess√£o. N√£o √© poss√≠vel iniciar a verifica√ß√£o.");
                return res.status(401).json({ success: false, error: "Usu√°rio n√£o autenticado no site." });
            }

            // üîπ Inicia a verifica√ß√£o dos doubles passando o email do usu√°rio do SITE
            blazeService.startChecking(req.session.user.email, req.session.user.id);

            // üîπ Responde com os dados do usu√°rio
            res.json({
                success: true,
                username: userInfo.username,
                balance: userInfo.balance,
            });

            console.log(`‚úÖ Verifica√ß√£o dos doubles iniciada ap√≥s login! Usu√°rio: ${req.session.user.email}`);

        } catch (error) {
            console.error("‚ùå Erro no processo de login da Blaze:", error);
            res.status(500).json({
                success: false,
                error: error.message || "Erro interno no servidor.",
            });
        }
    },
};
