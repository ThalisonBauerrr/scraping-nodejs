const Strategy = require('../models/strategyModel');

module.exports = {
    // Cria uma nova estrat√©gia
    createStrategy: async (req, res) => {
        let { strategyName, sequence, betBlackRed, color, stopWin, stopLoss, galeAmount, betWhite, userId } = req.body;
    
        // Se o userId n√£o veio no body, tenta pegar da sess√£o
        if (!userId && req.session.user) {
            userId = req.session.user.id;
        }
    
        console.log('üìå Criando estrat√©gia para o usu√°rio ID:', userId);
    
        try {
            // Valida√ß√£o b√°sica dos dados de entrada
            if (!strategyName || !sequence || !userId) {
                return res.status(400).json({ 
                    success: false, 
                    error: "Nome da estrat√©gia, sequ√™ncia e userId s√£o obrigat√≥rios." 
                });
            }
    
            // Converte a sequ√™ncia para um array, se necess√°rio
            const sequenceArray = Array.isArray(sequence) ? sequence : sequence.split(' -> ');
            const sequenceJSON = JSON.stringify(sequenceArray);
            function formatValue(value) {
                // Se o valor for uma string, transforme em um array
                if (typeof value === 'string') {
                    return [value];
                }
                // Se j√° for um array, retorne-o diretamente
                return value;
            }
            const formattedValue1 = formatValue(color); // ["red"]
            // Define o valor padr√£o para betWhite, se n√£o fornecido
            const betWhiteAmount = betWhite ? betWhite : "0";
    
            // Cria a estrat√©gia no banco de dados
            const strategyId = await Strategy.create({
                user_id: userId,
                name: strategyName,
                sequence: sequenceJSON,
                bet_amount: betBlackRed,
                chosen_color: formattedValue1,
                stop_win: stopWin,
                stop_loss: stopLoss,
                gale_amount: galeAmount,
                bet_white_amount: betWhiteAmount,
                status: 'inactive',
            });
    
            console.log('‚úÖ Estrat√©gia criada com sucesso! ID:', strategyId);
    
            // üîπ Verifica se a requisi√ß√£o foi feita via API (JSON) ou por um formul√°rio (HTML)
            if (req.headers.accept && req.headers.accept.includes("application/json")) {
                return res.json({ 
                    success: true, 
                    data: { strategyId }, 
                    message: "Estrat√©gia criada com sucesso." 
                });
            }
    
            // üîπ Se for uma requisi√ß√£o do navegador (formul√°rio), redireciona para a p√°gina de estrat√©gias
            return res.redirect('/strategies');
    
        } catch (error) {
            console.error('‚ùå Erro ao criar estrat√©gia:', error);
    
            if (req.headers.accept && req.headers.accept.includes("application/json")) {
                return res.status(500).json({ 
                    success: false, 
                    error: error.message || "Erro ao criar estrat√©gia." 
                });
            }
    
            return res.redirect('/strategies?error=Erro ao criar estrat√©gia.');
        }
    },
    // Obt√©m as estrat√©gias do usu√°rio
    getStrategies: async (req, res) => {
        //console.log('üöÄ Acessando p√°gina de estrat√©gias...');

        // Verifica se o usu√°rio est√° autenticado
        if (!req.session.user) {
            console.log('üî¥ Usu√°rio n√£o autenticado, redirecionando para login...');
            return res.status(401).json({ 
                success: false, 
                error: "Usu√°rio n√£o autenticado." 
            });
        }

        const userId = req.session.user.id;
        console.log(`üîé Buscando estrat√©gias para o usu√°rio ID: ${userId}`);

        try {
            // Busca as estrat√©gias no banco de dados
            const strategies = await Strategy.getByUserId(userId);
        
            //console.log('‚úÖ Estrat√©gias encontradas:', strategies[0]);
        
            // üîπ Se a requisi√ß√£o for via navegador (HTML), renderiza a p√°gina
            if (req.headers.accept && req.headers.accept.includes("text/html")) {
                return res.render('strategies', { strategies, userId });
            }
        
            // üîπ Se for uma requisi√ß√£o AJAX ou API, retorna JSON
            return res.json({ 
                success: true, 
                data: { strategies: strategies || [] } 
            });
        
        } catch (error) {
            console.error('‚ùå Erro ao buscar estrat√©gias:', error);
        
            if (!res.headersSent) {
                return res.status(500).json({ 
                    success: false, 
                    error: error.message || "Erro ao buscar estrat√©gias." 
                });
            }
        }
        
    },
    // Atualiza o status de uma estrat√©gia
    updateStatus: async (req, res) => {
        const { strategyId, status } = req.body;

        try {
            // Valida√ß√£o b√°sica dos dados de entrada
            if (!strategyId || !status) {
                return res.status(400).json({ 
                    success: false, 
                    error: "strategyId e status s√£o obrigat√≥rios." 
                });
            }

            // Atualiza o status da estrat√©gia no banco de dados
            const result = await Strategy.updateStatus(strategyId, status);

            res.json({ 
                success: true, 
                data: result, 
                message: "Status da estrat√©gia atualizado com sucesso." 
            });

        } catch (error) {
            console.error('‚ùå Erro ao atualizar status da estrat√©gia:', error);
            res.status(500).json({ 
                success: false, 
                error: error.message || "Erro ao atualizar status da estrat√©gia." 
            });
        }
    },
    getUserStrategyCount: async (req, res) => {
        try {
            const user_id = req.session.user?.id; // Obt√©m o ID do usu√°rio logado
            if (!user_id) {
                return res.status(401).json({ success: false, message: "Usu√°rio n√£o autenticado." });
            }
    
            // Conta o n√∫mero de estrat√©gias do usu√°rio
            const [result] = await Strategy.countUserStrategies(user_id);
    
            res.status(200).json({
                success: true,
                strategyCount: result.count || 0
            });
    
        } catch (error) {
            console.error("‚ùå Erro ao contar estrat√©gias:", error);
            res.status(500).json({ success: false, message: "Erro ao contar estrat√©gias." });
        }
    },
    deleteStrategy: async (req, res) => {
        try {
            const strategyId = req.params.id;
            const userId = req.session.user?.id; // Obt√©m o ID do usu√°rio logado
    
            if (!userId) {
                return res.status(401).json({ success: false, message: "Usu√°rio n√£o autenticado." });
            }
    
            // Verifica se a estrat√©gia pertence ao usu√°rio
            const strategy = await Strategy.findById(strategyId);
            if (!strategy || strategy.user_id !== userId) {
                return res.status(403).json({ success: false, message: "Acesso negado." });
            }
    
            // Remove a estrat√©gia do banco
            await Strategy.deleteById(strategyId);
            res.status(200).json({ success: true, message: "Estrat√©gia removida com sucesso." });
    
        } catch (error) {
            console.error("‚ùå Erro ao excluir estrat√©gia:", error);
            res.status(500).json({ success: false, message: "Erro ao excluir estrat√©gia." });
        }
    }
};